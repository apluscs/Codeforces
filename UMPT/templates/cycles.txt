// detect cycle in undirected graph
bool cyclic() {
  vis.clear();
  vis.resize(n);  // make sure everything is false
  for (int i = 0; i != n; ++i)
    if (!vis[i] && isCycle(i, -1)) return true; // go over each component at a time
  return false; 
}
bool isCycle(int curr, int par) {
  vis[curr] = true;
  for (auto i : adj[curr]) {
    if (!vis[i]) {
      if (isCycle(i, curr))
        return true;
    } else if (i != par)
      return true;
  }
  return false;
}


// detect cycle in directed graph
bool cyclic() {
  vis.resize(n);
  for (int i = 0; i != n; i++)
    if (dfs(i)) return true;
  return false;
}

bool dfs(int curr) {                 //objective is to try to find one path to a cycle=bad node
  if (vis[curr] == 1) return true;  //node we alr visited in this path = cycle OR a node that has been marked as a cycle previously
  if (vis[curr] == 2) return false;   //we know this node is good so don't worry
  vis[curr] = 1;                     //mark as cycle
  for (int ng : adj[curr])
    if (dfs(ng))
      return true;
  vis[curr] = 2;  //only demark cycle if we make it past the for loop(good node)
  return false;
}
